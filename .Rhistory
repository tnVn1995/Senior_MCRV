therap = 2
rec = 2
data.nonan = copy(data.star)
data.nonan[zeros[,1],c((therap+zeros[,2]),(therap+zeros[,2]+2))] = NA
cat('Processed data\n')
print(data.nonan[1:10,])
cat('\n\n\n\n')
cat('Non-processed data\n')
print(data.star[1:10,])
data.star[7, c((therap+zeros[,2]),(therap+zeros[,2]+2))]
c((therap+zeros[,2]),(therap+zeros[,2]+2))
c(3,5)
therap+zeros[,2]
data.star[7, c((therap+zeros[7,2]),(therap+zeros[7,2]+2))]
data.star[1:10,]
data.star[500:510,]
data.star[300:310,]
library(data.table)
therap = 2
rec = 2
data.nonan = copy(data.star)
cat('Non-processed data\n')
print(data.nonan[1:10,])
cat('\n\n\n\n')
data.nonan[zeros[,1],c((therap+zeros[,2]),(therap+zeros[,2]+2))] = NA
cat('Processed data\n')
print(data.nonan[1:10,])
data.star[data.star$W1==0,]
class(data.star)
colnames(data.star)
data.star[data.star['W1']==0,]
data.star[data.star[,'W1']==0,]
library(data.table)
therap = 2
rec = 2
data.nonan = copy(data.star)
cat('Non-processed data\n')
print(data.nonan[1:10,])
cat('\n\n\n\n')
data.nonan[data.nonan['W1']==0, c(3,5)] = NA
data.nonan[data.nonan['W2']==0, c(4,6)] = NA
cat('Processed data\n')
print(data.nonan[1:10,])
data.nonan[data.nonan['W1']==0, c(3,5)][1:5,]
data.nonan[data.nonan['W1']==0, c(3,5)]
data.nonan[data.nonan['W1']==0, c(1,3,5)]
data.nonan = copy(data.star)
data.nonan[data.nonan['W1']==0, c(1,3,5)][1:5]
data.nonan[1:5]
data.nonan[1:5,]
data.nonan[data.nonan['W1']==0,][1:5,]
class(data.nonan)
library(data.table)
therap = 2
rec = 2
data.nonan = copy(data.star)
cat('Non-processed data\n')
print(data.nonan[1:10,])
cat('\n\n\n\n')
data.nonan[data.nonan['W1',]==0, c(3,5)] = NA
data.nonan[data.nonan['W1',]==0, c(3,5)]
library(data.table)
therap = 2
rec = 2
data.nonan = copy(data.star)
cat('Non-processed data\n')
print(data.nonan[1:10,])
cat('\n\n\n\n')
data.nonan[data.nonan[,'W1']==0, c(3,5)] = NA
data.nonan[data.nonan[,'W2']==0, c(4,6)] = NA
cat('Processed data\n')
print(data.nonan[1:10,])
data <- read.csv('data.csv')
data <- as.matrix(data)
stat = get_stats(data)
# 1 means no 2 means yes
get_ij <- function(data, cond){
#' @description compute the count of ij (answer yes for W and no or yes for Y)
#' @param data matrix data for operation
#' @param cond int (1 or 2) either yes or no answer
#' @param ws int number of Ws (e.g: 'ALT_TP31')
#' @param ys int number of Ys (e.g: '')
# W always equals 1 but Y can either be 1 or 0
ij_count <- matrix(0, nrow = 16, ncol = 4)
Ws <- 1:16
Ys <- 1:4
# Iterate through each value of Ws
for (i in seq_along(Ws)){
# Iterate through each value of Ys
for (j in seq_along(Ys)){
ij_count[i,j] <-  ij_count[i, j] + dim(subset(data, (data[, 'ALT_TP31']== i & data[, j]==cond)))[1]
ij_count[i,j] <-  ij_count[i, j] + dim(subset(data, (data[, 'ALT_TP32']== i & data[, j+4]==cond)))[1]
ij_count[i,j] <-  ij_count[i, j] + dim(subset(data, (data[, 'ALT_TP33']== i & data[, j+8]==cond)))[1]
}
}
return(ij_count)}
# Test case
# cond = 1
# subset(pp_data, (pp_data[, 'ALT_TP31']==1 & pp_data[, 1]==cond)) %>%
#   dplyr::select(TP1_REC1, ALT_TP31) %>%
#   dplyr::summarise_all(dplyr::funs(dplyr::n_distinct(.)))
get_i <- function(data){
#' @description compute the count of ith level for W
#' @param data matrix data for operation
i_count <- matrix(0, nrow = 1, ncol = 16)
for (i in 1:16){
i_count[, i] <- i_count[, i] + dim(subset(data, data[, 'ALT_TP31'] == i))[1]
i_count[, i] <- i_count[, i] + dim(subset(data, data[, 'ALT_TP32'] == i))[1]
i_count[, i] <- i_count[, i] + dim(subset(data, data[, 'ALT_TP33'] == i))[1]
}
return(i_count)
}
# # Test case
# get_i(pp_data)
# subset(data, data[, 'ALT_TP31'] == 1) %>%
#   select(ALT_TP31) %>%
#   dplyr::n_distinct(.)
get_j <- function(data, cond){
#' @description compute the count of jth level for Y
#' @param cond int (1 or 2) either yes or no for value of Y
j_count <- matrix(0, nrow = 1, ncol = 4)
for (j in 1:4){
cols <- c(j, j+4, j+8)
filtered_data <- subset(data, (data[,j]==cond|data[,j+4]==cond|data[,j+8]==cond))
for (indi in 1:nrow(filtered_data)){
if (sum(is.na(filtered_data[indi, cols])) == 2){
j_count[1, j] <- j_count[1, j] + 1
}
else if (sum(is.na(filtered_data[indi, cols])) == 1){
j_count[1, j] <- j_count[1, j] + sum(filtered_data[indi, cols]==cond, na.rm = TRUE) / 2
}
else {
j_count[1, j] <- j_count[1, j] + sum(filtered_data[indi, cols]==cond) / 3
}
}
}
return(j_count)}
# get_j(pp_data, cond = 1)
#
# # test case
# cond <- 1
# filtered_data <- subset(pp_data, (pp_data[,1]==cond|pp_data[,1+4]==cond|pp_data[,1+8]==cond))
# filtered_data
# cols <- c(1, 1+4, 1+8)
# when there's 1 na value
assert("Check your code when there's 1 na value ", sum(filtered_data[4, cols]==1, na.rm = TRUE) == 2)
# library(tidyverse)
# library(haven)
# library(testit)
arg=commandArgs(TRUE)
arg<-as.numeric(arg)
i = as.numeric(Sys.getenv("SGE_TASK_ID"))
cat('Starting run i =',i,'\n')
requiredPackages = c('foreach','doMC','data.table','testit','haven','tidyverse')
for(p in requiredPackages){
if(!require(p,character.only = TRUE)) install.packages(p, repos="http://cran.us.r-project.org")
library(p,character.only = TRUE)
}
pp_data <- as.tibble(pp_data)
file_path <- '2012 NHIS Adult Sample_CAM_HIT paper 2017-2-17.sav'
data <-  haven::read_sav(file_path)
ALT_Tp = data %>% dplyr::select('TP1_REC1', 'TP1_REC2', 'TP1_REC3', 'TP1_REC4','TP2_REC1', 'TP2_REC2', 'TP2_REC3', 'TP2_REC4',
'TP3_REC1', 'TP3_REC2', 'TP3_REC3', 'TP3_REC4','ALT_TP31', 'ALT_TP32', 'ALT_TP33')
install.packages('doMC')
# library(tidyverse)
# library(haven)
# library(testit)
arg=commandArgs(TRUE)
arg<-as.numeric(arg)
i = as.numeric(Sys.getenv("SGE_TASK_ID"))
cat('Starting run i =',i,'\n')
requiredPackages = c('data.table','testit','haven','tidyverse')
for(p in requiredPackages){
if(!require(p,character.only = TRUE)) install.packages(p, repos="http://cran.us.r-project.org")
library(p,character.only = TRUE)
}
file_path <- '2012 NHIS Adult Sample_CAM_HIT paper 2017-2-17.sav'
data <-  haven::read_sav(file_path)
ALT_Tp = data %>% dplyr::select('TP1_REC1', 'TP1_REC2', 'TP1_REC3', 'TP1_REC4','TP2_REC1', 'TP2_REC2', 'TP2_REC3', 'TP2_REC4',
'TP3_REC1', 'TP3_REC2', 'TP3_REC3', 'TP3_REC4','ALT_TP31', 'ALT_TP32', 'ALT_TP33')
head(ALT_Tp)
# 1 means no 2 means yes
get_ij <- function(data, cond){
#' @description compute the count of ij (answer yes for W and no or yes for Y)
#' @param data matrix data for operation
#' @param cond int (1 or 2) either yes or no answer
#' @param ws int number of Ws (e.g: 'ALT_TP31')
#' @param ys int number of Ys (e.g: '')
# W always equals 1 but Y can either be 1 or 0
ij_count <- matrix(0, nrow = 16, ncol = 4)
Ws <- 1:16
Ys <- 1:4
# Iterate through each value of Ws
for (i in seq_along(Ws)){
# Iterate through each value of Ys
for (j in seq_along(Ys)){
ij_count[i,j] <-  ij_count[i, j] + dim(subset(data, (data[, 'ALT_TP31']== i & data[, j]==cond)))[1]
ij_count[i,j] <-  ij_count[i, j] + dim(subset(data, (data[, 'ALT_TP32']== i & data[, j+4]==cond)))[1]
ij_count[i,j] <-  ij_count[i, j] + dim(subset(data, (data[, 'ALT_TP33']== i & data[, j+8]==cond)))[1]
}
}
return(ij_count)}
# Test case
# cond = 1
# subset(pp_data, (pp_data[, 'ALT_TP31']==1 & pp_data[, 1]==cond)) %>%
#   dplyr::select(TP1_REC1, ALT_TP31) %>%
#   dplyr::summarise_all(dplyr::funs(dplyr::n_distinct(.)))
get_i <- function(data){
#' @description compute the count of ith level for W
#' @param data matrix data for operation
i_count <- matrix(0, nrow = 1, ncol = 16)
for (i in 1:16){
i_count[, i] <- i_count[, i] + dim(subset(data, data[, 'ALT_TP31'] == i))[1]
i_count[, i] <- i_count[, i] + dim(subset(data, data[, 'ALT_TP32'] == i))[1]
i_count[, i] <- i_count[, i] + dim(subset(data, data[, 'ALT_TP33'] == i))[1]
}
return(i_count)
}
# # Test case
# get_i(pp_data)
# subset(data, data[, 'ALT_TP31'] == 1) %>%
#   select(ALT_TP31) %>%
#   dplyr::n_distinct(.)
get_j <- function(data, cond){
#' @description compute the count of jth level for Y
#' @param cond int (1 or 2) either yes or no for value of Y
j_count <- matrix(0, nrow = 1, ncol = 4)
for (j in 1:4){
cols <- c(j, j+4, j+8)
filtered_data <- subset(data, (data[,j]==cond|data[,j+4]==cond|data[,j+8]==cond))
for (indi in 1:nrow(filtered_data)){
if (sum(is.na(filtered_data[indi, cols])) == 2){
j_count[1, j] <- j_count[1, j] + 1
}
else if (sum(is.na(filtered_data[indi, cols])) == 1){
j_count[1, j] <- j_count[1, j] + sum(filtered_data[indi, cols]==cond, na.rm = TRUE) / 2
}
else {
j_count[1, j] <- j_count[1, j] + sum(filtered_data[indi, cols]==cond) / 3
}
}
}
return(j_count)}
# get_j(pp_data, cond = 1)
#
# # test case
# cond <- 1
# filtered_data <- subset(pp_data, (pp_data[,1]==cond|pp_data[,1+4]==cond|pp_data[,1+8]==cond))
# filtered_data
# cols <- c(1, 1+4, 1+8)
# when there's 1 na value
assert("Check your code when there's 1 na value ", sum(filtered_data[4, cols]==1, na.rm = TRUE) == 2)
pp_data <- ALT_Tp %>%
dplyr::filter(!(is.na(ALT_TP31)&is.na(ALT_TP32)&is.na(ALT_TP33)))
pp_data <- as.tibble(pp_data)
colnames(pp_data)
pp_data %>%
dplyr::select(head(names(.),12)) %>%
dplyr::filter(TP1_REC1==2)
write.csv(pp_data, 'data.csv', row.names = FALSE)
# 1 means no 2 means yes
get_ij <- function(data, cond){
#' @description compute the count of ij (answer yes for W and no or yes for Y)
#' @param data matrix data for operation
#' @param cond int (1 or 2) either yes or no answer
#' @param ws int number of Ws (e.g: 'ALT_TP31')
#' @param ys int number of Ys (e.g: '')
# W always equals 1 but Y can either be 1 or 0
ij_count <- matrix(0, nrow = 16, ncol = 4)
Ws <- 1:16
Ys <- 1:4
# Iterate through each value of Ws
for (i in seq_along(Ws)){
# Iterate through each value of Ys
for (j in seq_along(Ys)){
ij_count[i,j] <-  ij_count[i, j] + dim(subset(data, (data[, 'ALT_TP31']== i & data[, j]==cond)))[1]
ij_count[i,j] <-  ij_count[i, j] + dim(subset(data, (data[, 'ALT_TP32']== i & data[, j+4]==cond)))[1]
ij_count[i,j] <-  ij_count[i, j] + dim(subset(data, (data[, 'ALT_TP33']== i & data[, j+8]==cond)))[1]
}
}
return(ij_count)}
# Test case
# cond = 1
# subset(pp_data, (pp_data[, 'ALT_TP31']==1 & pp_data[, 1]==cond)) %>%
#   dplyr::select(TP1_REC1, ALT_TP31) %>%
#   dplyr::summarise_all(dplyr::funs(dplyr::n_distinct(.)))
get_i <- function(data){
#' @description compute the count of ith level for W
#' @param data matrix data for operation
i_count <- matrix(0, nrow = 1, ncol = 16)
for (i in 1:16){
i_count[, i] <- i_count[, i] + dim(subset(data, data[, 'ALT_TP31'] == i))[1]
i_count[, i] <- i_count[, i] + dim(subset(data, data[, 'ALT_TP32'] == i))[1]
i_count[, i] <- i_count[, i] + dim(subset(data, data[, 'ALT_TP33'] == i))[1]
}
return(i_count)
}
# # Test case
# get_i(pp_data)
# subset(data, data[, 'ALT_TP31'] == 1) %>%
#   select(ALT_TP31) %>%
#   dplyr::n_distinct(.)
get_j <- function(data, cond){
#' @description compute the count of jth level for Y
#' @param cond int (1 or 2) either yes or no for value of Y
j_count <- matrix(0, nrow = 1, ncol = 4)
for (j in 1:4){
cols <- c(j, j+4, j+8)
filtered_data <- subset(data, (data[,j]==cond|data[,j+4]==cond|data[,j+8]==cond))
for (indi in 1:nrow(filtered_data)){
if (sum(is.na(filtered_data[indi, cols])) == 2){
j_count[1, j] <- j_count[1, j] + 1
}
else if (sum(is.na(filtered_data[indi, cols])) == 1){
j_count[1, j] <- j_count[1, j] + sum(filtered_data[indi, cols]==cond, na.rm = TRUE) / 2
}
else {
j_count[1, j] <- j_count[1, j] + sum(filtered_data[indi, cols]==cond) / 3
}
}
}
return(j_count)}
# get_j(pp_data, cond = 1)
#
# # test case
# cond <- 1
# filtered_data <- subset(pp_data, (pp_data[,1]==cond|pp_data[,1+4]==cond|pp_data[,1+8]==cond))
# filtered_data
# cols <- c(1, 1+4, 1+8)
# when there's 1 na value
# assert("Check your code when there's 1 na value ", sum(filtered_data[4, cols]==1, na.rm = TRUE) == 2)
# assert("Check your code when there's 1 na value", sum(is.na(filtered_data[4, cols]==1)) == 1)
# # when there are 2 na values
# assert("Check your code when there are 2 na values ", sum(filtered_data[10, cols]==1, na.rm = TRUE) == 1)
# assert("Check your code when there are 2 na values ", sum(is.na(filtered_data[10, cols]==1))==2)
# Calculate chi-squared statistics
get_stats = function(data, summary=FALSE){
n = dim(data)[1]
ij_count1 = get_ij(data = data, cond = 1)
notij_count1 = get_ij(data = data, cond = 2)
i_count1 = get_i(data = data)
yj_count1 = get_j(data=data, cond = 1)
notj_count1 = get_j(data=data, cond = 2)
pi1_i. = i_count1 / n
# the grand total proportion of yeses and nos for the ith, jth and ijth values
yp1_.j = yj_count1 / n
np1_.j = notj_count1 / n
ypi1_ij = ij_count1 / n
npi1_ij = notij_count1 / n
yp_grandstat1 = sum((ypi1_ij - t(pi1_i.) %*% yp1_.j)^2 / (t(pi1_i.) %*% yp1_.j))
np_grandstat1 = sum((npi1_ij - t(pi1_i.) %*% np1_.j)^2 / (t(pi1_i.) %*% np1_.j))
grandstat1 = (yp_grandstat1 + np_grandstat1) * n
if (summary == TRUE){
return (list(grandstat = grandstat1, yp_grandstat = yp_grandstat1, np_grandstat = np_grandstat1))
}
else {
return (grandstat1)
}
}
system.time(get_stats(pp_data))
data <- read.csv('data.csv')
data <- as.matrix(data)
stat = get_stats(data)
stat
n = dim(data)[1]
end = dim(data)[2]
# Sample from non-nan values for each level (w1,w2,y1,y2)
W = sample(x=1:n,size=n,replace=TRUE)
mm<- rbind(data[which(!is.na(data[,13])),c(1,2,3,4)], data[which(!is.na(data[,14])),c(5,6,7,8)],
data[which(!is.na(data[,15])),c(9,10,11,12)])
mm
Y2 = sample(1:(dim(mm)[1]),size=n, replace=TRUE)
Y3 = sample(1:(dim(mm)[1]),size=n,replace=TRUE)
Y4 = sample(1:(dim(mm)[1]),size=n,replace=TRUE)
c3 = mm[Y3,1]
n = dim(data)[1]
end = dim(data)[2]
# Sample from non-nan values for each level (w1,w2,y1,y2)
W = sample(x=1:n,size=n,replace=TRUE)
mm<- rbind(data[which(!is.na(data[,13])),c(1,2,3,4)], data[which(!is.na(data[,14])),c(5,6,7,8)],
data[which(!is.na(data[,15])),c(9,10,11,12)])
Y1 <- sample(1:(dim(mm)[1]),size=n, replace=TRUE)
Y2 <- sample(1:(dim(mm)[1]),size=n,replace=TRUE)
Y3 <- sample(1:(dim(mm)[1]),size=n,replace=TRUE)
c1 <- mm[Y1,1]
c2 <- mm[Y2,1]
c3 <- mm[Y3,1]
c4 <- mm[Y1,2]
c5 <- mm[Y2,2]
c6 <- mm[Y3,2]
c7 <- mm[Y1,3]
c8 <- mm[Y2,3]
c9 <- mm[Y3,3]
c10 <- mm[Y1,4]
c11 <- mm[Y2,4]
c12 <- mm[Y3,4]
data.star = cbind(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c12,data[W,c(13:15)])
stat.star = get_stats(data.star)
stat.star
setwd("C:/Users/tnguy/OneDrive - Texas Tech University/Senior_Report")
outputName=paste("task-",i,".RData",sep="")
outputPath=file.path("Output",outputName)
save("stat.star",file=outputPath)
outputName=paste("task-",i,".RData",sep="")
outputPath=file.path("Output",outputName)
save("stat.star",file=outputPath)
attach('task-NA.RData')
attach('Output/task-NA.RData')
results
result
stat.star
d <- as.data.frame(0)
d
d <- as.data.frame(0)
d[1,] <- 1
d
d <- as.data.frame(0)
d[1,] <- 1
d[2,] <- 2
d
stat
head(data.star)
data.star[data.star['ALT_TP31'] == NA,]
which(data.star[data.star['ALT_TP31'] == NA,])
which(data.star['ALT_TP31'] == NA)
data.star[data.star['ALT_TP31'] == NA,]
head(data.star)
which(is.na(data.star['ALT_TP31']))
which(is.na(data.star['ALT_TP31']))
head(data.star)
head(data[which(is.na(data[,'ALT_TP31'])),c(1,2,3,4)])
head(data[which(is.na(data[,'ALT_TP32'])),])
head(data[which(is.na(data[,'ALT_TP33'])),])
head(data.star[which(is.na(data.star[,'ALT_TP33'])),])
head(data.star[which(is.na(data.star[,'ALT_TP33'])),c(9,10,11,12)])
colnames(data.star)
head(data.star[which(is.na(data.star[,'ALT_TP33'])),c(8,9,10,11,12)])
data.star = cbind(c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,data[W,c(13:15)])
head(data.star[which(is.na(data.star[,'ALT_TP33'])),c(9,10,11,12)])
head(data.star[which(is.na(data.star[,'ALT_TP33'])),c(9,10,11,12)]) = NA
data.star[which(is.na(data.star[,'ALT_TP33'])),c(9,10,11,12)] = NA
head(data.star)
# library(tidyverse)
# library(haven)
# library(testit)
arg=commandArgs(TRUE)
arg<-as.numeric(arg)
i = as.numeric(Sys.getenv("SGE_TASK_ID"))
cat('Starting run i =',i,'\n')
requiredPackages = c('data.table','testit','haven','tidyverse')
for(p in requiredPackages){
if(!require(p,character.only = TRUE)) install.packages(p, repos="http://cran.us.r-project.org")
library(p,character.only = TRUE)
}
#--- Generating simulated data
pi_R = c(0.4,0.6)
fun = function(p)((p/(0.4-p))/((0.5-p)/(0.1+p)) - 1)
pw.11 = uniroot(fun, lower=0.0, upper = 1.0)$root
pw.11
pw.10 = 0.4 - pw.11
fun = function(p)((p/(0.4-p))/((0.6-p)/(0.1+p)) - 2)
pw.10
fun = function(p)((p/(0.4-p))/((0.5-p)/(0.1+p)) - 2)
fun = function(p)((p/(0.4-p))/((0.6-p)/p) - 2)
pw.11 = uniroot(fun, lower=0.0, upper = 1.0)$root
# Constructing Quadratic Formula
result <- function(a,b,c){
if(delta(a,b,c) > 0){ # first case D>0
x_1 = (-b+sqrt(delta(a,b,c)))/(2*a)
x_2 = (-b-sqrt(delta(a,b,c)))/(2*a)
result = c(x_1,x_2)
}
else if(delta(a,b,c) == 0){ # second case D=0
x = -b/(2*a)
}
else {"There are no real roots."} # third case D<0
}
# Constructing delta
delta<-function(a,b,c){
b^2-4*a*c
}
result(1,-2,0.48)
# Constructing Quadratic Formula
result <- function(a,b,c){
if(delta(a,b,c) > 0){ # first case D>0
x_1 = (-b+sqrt(delta(a,b,c)))/(2*a)
x_2 = (-b-sqrt(delta(a,b,c)))/(2*a)
result = c(x_1,x_2)
}
else if(delta(a,b,c) == 0){ # second case D=0
x = -b/(2*a)
}
else {"There are no real roots."} # third case D<0
}
# Constructing delta
delta<-function(a,b,c){
b^2-4*a*c
}
a <- result(1,-2,0.48)
a
pw.11 = 0.48
pw.10 = 0.4 - pw.11
pw.01 = 0.6 - pw.11
pw.00 = pw.11
pw.11 + pw.10 + pw.01 + pw.00
data <- read.csv('TypeII_alt/TypeIresults.csv')
data
names(data)
mean(data$`p.value` <= 0.05)
head(pp_data)
View(pp_data)
head(pp_data)
